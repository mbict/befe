// Code generated by 'yaegi extract github.com/mbict/befe/dsl/http'. DO NOT EDIT.

package buildin

import (
	"context"
	"github.com/mbict/befe/dsl/http"
	"github.com/mbict/befe/expr"
	"reflect"
)

func init() {
	Symbols["github.com/mbict/befe/dsl/http/http"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Client":                 reflect.ValueOf(http.Client),
		"CursorPaginatedResults": reflect.ValueOf(http.CursorPaginatedResults),
		"OffsetPaginatedResults": reflect.ValueOf(http.OffsetPaginatedResults),
		"ParamFromPaginator":     reflect.ValueOf(http.ParamFromPaginator),
		"ParamFromPath":          reflect.ValueOf(http.ParamFromPath),
		"ReverseProxy":           reflect.ValueOf(http.ReverseProxy),
		"Router":                 reflect.ValueOf(http.Router),
		"ValueFromPaginator":     reflect.ValueOf(http.ValueFromPaginator),
		"ValueFromPath":          reflect.ValueOf(http.ValueFromPath),
		"WithHostFromServiceUrl": reflect.ValueOf(http.WithHostFromServiceUrl),

		// type definitions
		"Endpoint":           reflect.ValueOf((*http.Endpoint)(nil)),
		"HttpClient":         reflect.ValueOf((*http.HttpClient)(nil)),
		"HttpRouter":         reflect.ValueOf((*http.HttpRouter)(nil)),
		"PathRouter":         reflect.ValueOf((*http.PathRouter)(nil)),
		"ReverseProxyOption": reflect.ValueOf((*http.ReverseProxyOption)(nil)),
		"RouterGroup":        reflect.ValueOf((*http.RouterGroup)(nil)),

		// interface wrapper definitions
		"_Endpoint":    reflect.ValueOf((*_github_com_mbict_befe_dsl_http_Endpoint)(nil)),
		"_HttpClient":  reflect.ValueOf((*_github_com_mbict_befe_dsl_http_HttpClient)(nil)),
		"_HttpRouter":  reflect.ValueOf((*_github_com_mbict_befe_dsl_http_HttpRouter)(nil)),
		"_PathRouter":  reflect.ValueOf((*_github_com_mbict_befe_dsl_http_PathRouter)(nil)),
		"_RouterGroup": reflect.ValueOf((*_github_com_mbict_befe_dsl_http_RouterGroup)(nil)),
	}
}

// _github_com_mbict_befe_dsl_http_Endpoint is an interface wrapper for Endpoint type
type _github_com_mbict_befe_dsl_http_Endpoint struct {
	IValue        interface{}
	WBuildHandler func(ctx context.Context, next expr.Handler) expr.Handler
	WThen         func(a0 ...expr.Action)
	WWith         func(a0 ...expr.Action) http.Endpoint
}

func (W _github_com_mbict_befe_dsl_http_Endpoint) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_dsl_http_Endpoint) Then(a0 ...expr.Action) {
	W.WThen(a0...)
}
func (W _github_com_mbict_befe_dsl_http_Endpoint) With(a0 ...expr.Action) http.Endpoint {
	return W.WWith(a0...)
}

// _github_com_mbict_befe_dsl_http_HttpClient is an interface wrapper for HttpClient type
type _github_com_mbict_befe_dsl_http_HttpClient struct {
	IValue          interface{}
	WDelete         func(path expr.Valuer) expr.Promise
	WGet            func(path expr.Valuer) expr.Promise
	WHead           func(path expr.Valuer) expr.Promise
	WPatch          func(path expr.Valuer) expr.Promise
	WPost           func(path expr.Valuer) expr.Promise
	WPut            func(path expr.Valuer) expr.Promise
	WWithHeader     func(key string, value expr.Valuer) http.HttpClient
	WWithQueryParam func(key string, value expr.Valuer) http.HttpClient
}

func (W _github_com_mbict_befe_dsl_http_HttpClient) Delete(path expr.Valuer) expr.Promise {
	return W.WDelete(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpClient) Get(path expr.Valuer) expr.Promise {
	return W.WGet(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpClient) Head(path expr.Valuer) expr.Promise {
	return W.WHead(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpClient) Patch(path expr.Valuer) expr.Promise {
	return W.WPatch(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpClient) Post(path expr.Valuer) expr.Promise {
	return W.WPost(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpClient) Put(path expr.Valuer) expr.Promise {
	return W.WPut(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpClient) WithHeader(key string, value expr.Valuer) http.HttpClient {
	return W.WWithHeader(key, value)
}
func (W _github_com_mbict_befe_dsl_http_HttpClient) WithQueryParam(key string, value expr.Valuer) http.HttpClient {
	return W.WWithQueryParam(key, value)
}

// _github_com_mbict_befe_dsl_http_HttpRouter is an interface wrapper for HttpRouter type
type _github_com_mbict_befe_dsl_http_HttpRouter struct {
	IValue        interface{}
	WAll          func(path string) http.Endpoint
	WBuildHandler func(ctx context.Context, next expr.Handler) expr.Handler
	WConnect      func(path string) http.Endpoint
	WDelete       func(path string) http.Endpoint
	WGet          func(path string) http.Endpoint
	WGroup        func(path string) http.RouterGroup
	WMethod       func(path string, methods ...string) http.Endpoint
	WOnNotFound   func(a0 ...expr.Action) http.HttpRouter
	WOptions      func(path string) http.Endpoint
	WPatch        func(path string) http.Endpoint
	WPost         func(path string) http.Endpoint
	WPut          func(path string) http.Endpoint
	WWith         func(a0 ...expr.Action) http.HttpRouter
}

func (W _github_com_mbict_befe_dsl_http_HttpRouter) All(path string) http.Endpoint {
	return W.WAll(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) Connect(path string) http.Endpoint {
	return W.WConnect(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) Delete(path string) http.Endpoint {
	return W.WDelete(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) Get(path string) http.Endpoint {
	return W.WGet(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) Group(path string) http.RouterGroup {
	return W.WGroup(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) Method(path string, methods ...string) http.Endpoint {
	return W.WMethod(path, methods...)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) OnNotFound(a0 ...expr.Action) http.HttpRouter {
	return W.WOnNotFound(a0...)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) Options(path string) http.Endpoint {
	return W.WOptions(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) Patch(path string) http.Endpoint {
	return W.WPatch(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) Post(path string) http.Endpoint {
	return W.WPost(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) Put(path string) http.Endpoint {
	return W.WPut(path)
}
func (W _github_com_mbict_befe_dsl_http_HttpRouter) With(a0 ...expr.Action) http.HttpRouter {
	return W.WWith(a0...)
}

// _github_com_mbict_befe_dsl_http_PathRouter is an interface wrapper for PathRouter type
type _github_com_mbict_befe_dsl_http_PathRouter struct {
	IValue   interface{}
	WAll     func(path string) http.Endpoint
	WConnect func(path string) http.Endpoint
	WDelete  func(path string) http.Endpoint
	WGet     func(path string) http.Endpoint
	WMethod  func(path string, methods ...string) http.Endpoint
	WOptions func(path string) http.Endpoint
	WPatch   func(path string) http.Endpoint
	WPost    func(path string) http.Endpoint
	WPut     func(path string) http.Endpoint
}

func (W _github_com_mbict_befe_dsl_http_PathRouter) All(path string) http.Endpoint {
	return W.WAll(path)
}
func (W _github_com_mbict_befe_dsl_http_PathRouter) Connect(path string) http.Endpoint {
	return W.WConnect(path)
}
func (W _github_com_mbict_befe_dsl_http_PathRouter) Delete(path string) http.Endpoint {
	return W.WDelete(path)
}
func (W _github_com_mbict_befe_dsl_http_PathRouter) Get(path string) http.Endpoint {
	return W.WGet(path)
}
func (W _github_com_mbict_befe_dsl_http_PathRouter) Method(path string, methods ...string) http.Endpoint {
	return W.WMethod(path, methods...)
}
func (W _github_com_mbict_befe_dsl_http_PathRouter) Options(path string) http.Endpoint {
	return W.WOptions(path)
}
func (W _github_com_mbict_befe_dsl_http_PathRouter) Patch(path string) http.Endpoint {
	return W.WPatch(path)
}
func (W _github_com_mbict_befe_dsl_http_PathRouter) Post(path string) http.Endpoint {
	return W.WPost(path)
}
func (W _github_com_mbict_befe_dsl_http_PathRouter) Put(path string) http.Endpoint {
	return W.WPut(path)
}

// _github_com_mbict_befe_dsl_http_RouterGroup is an interface wrapper for RouterGroup type
type _github_com_mbict_befe_dsl_http_RouterGroup struct {
	IValue   interface{}
	WAll     func(path string) http.Endpoint
	WConnect func(path string) http.Endpoint
	WDelete  func(path string) http.Endpoint
	WGet     func(path string) http.Endpoint
	WGroup   func(path string) http.RouterGroup
	WMethod  func(path string, methods ...string) http.Endpoint
	WOptions func(path string) http.Endpoint
	WPatch   func(path string) http.Endpoint
	WPost    func(path string) http.Endpoint
	WPut     func(path string) http.Endpoint
	WWith    func(a0 ...expr.Action) http.RouterGroup
}

func (W _github_com_mbict_befe_dsl_http_RouterGroup) All(path string) http.Endpoint {
	return W.WAll(path)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) Connect(path string) http.Endpoint {
	return W.WConnect(path)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) Delete(path string) http.Endpoint {
	return W.WDelete(path)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) Get(path string) http.Endpoint {
	return W.WGet(path)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) Group(path string) http.RouterGroup {
	return W.WGroup(path)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) Method(path string, methods ...string) http.Endpoint {
	return W.WMethod(path, methods...)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) Options(path string) http.Endpoint {
	return W.WOptions(path)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) Patch(path string) http.Endpoint {
	return W.WPatch(path)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) Post(path string) http.Endpoint {
	return W.WPost(path)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) Put(path string) http.Endpoint {
	return W.WPut(path)
}
func (W _github_com_mbict_befe_dsl_http_RouterGroup) With(a0 ...expr.Action) http.RouterGroup {
	return W.WWith(a0...)
}
