// Code generated by 'yaegi extract github.com/mbict/befe/dsl/templates'. DO NOT EDIT.

package buildin

import (
	"github.com/mbict/befe/dsl/templates"
	"github.com/mbict/befe/expr"
	"reflect"
)

func init() {
	Symbols["github.com/mbict/befe/dsl/templates/templates"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"FromFile":    reflect.ValueOf(templates.FromFile),
		"FromPattern": reflect.ValueOf(templates.FromPattern),
		"FromString":  reflect.ValueOf(templates.FromString),
		"New":         reflect.ValueOf(templates.New),
		"WithData":    reflect.ValueOf(templates.WithData),

		// type definitions
		"HTMLTemplate": reflect.ValueOf((*templates.HTMLTemplate)(nil)),
		"Option":       reflect.ValueOf((*templates.Option)(nil)),

		// interface wrapper definitions
		"_HTMLTemplate": reflect.ValueOf((*_github_com_mbict_befe_dsl_templates_HTMLTemplate)(nil)),
	}
}

// _github_com_mbict_befe_dsl_templates_HTMLTemplate is an interface wrapper for HTMLTemplate type
type _github_com_mbict_befe_dsl_templates_HTMLTemplate struct {
	IValue          interface{}
	WRender         func(data ...expr.Param) expr.Action
	WRenderTemplate func(name string, data ...expr.Param) expr.Action
}

func (W _github_com_mbict_befe_dsl_templates_HTMLTemplate) Render(data ...expr.Param) expr.Action {
	return W.WRender(data...)
}
func (W _github_com_mbict_befe_dsl_templates_HTMLTemplate) RenderTemplate(name string, data ...expr.Param) expr.Action {
	return W.WRenderTemplate(name, data...)
}
