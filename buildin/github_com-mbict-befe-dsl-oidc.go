// Code generated by 'yaegi extract github.com/mbict/befe/dsl/oidc'. DO NOT EDIT.

package buildin

import (
	"context"
	"github.com/mbict/befe/dsl/oidc"
	"github.com/mbict/befe/expr"
	"reflect"
)

func init() {
	Symbols["github.com/mbict/befe/dsl/oidc/oidc"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AuthTokenRedirect":   reflect.ValueOf(oidc.AuthTokenRedirect),
		"DynamicSingleSignOn": reflect.ValueOf(oidc.DynamicSingleSignOn),
		"ErrNoAccessToken":    reflect.ValueOf(&oidc.ErrNoAccessToken).Elem(),
		"ErrNoToken":          reflect.ValueOf(&oidc.ErrNoToken).Elem(),
		"ErrTokenExpired":     reflect.ValueOf(&oidc.ErrTokenExpired).Elem(),
		"ErrValidatingToken":  reflect.ValueOf(&oidc.ErrValidatingToken).Elem(),
		"SingleSignOn":        reflect.ValueOf(oidc.SingleSignOn),
		"WithCookieHttpOnly":  reflect.ValueOf(oidc.WithCookieHttpOnly),
		"WithCookiePath":      reflect.ValueOf(oidc.WithCookiePath),

		// type definitions
		"ProviderOption": reflect.ValueOf((*oidc.ProviderOption)(nil)),
		"SSO":            reflect.ValueOf((*oidc.SSO)(nil)),

		// interface wrapper definitions
		"_SSO": reflect.ValueOf((*_github_com_mbict_befe_dsl_oidc_SSO)(nil)),
	}
}

// _github_com_mbict_befe_dsl_oidc_SSO is an interface wrapper for SSO type
type _github_com_mbict_befe_dsl_oidc_SSO struct {
	IValue            interface{}
	WBuildCondition   func(a0 context.Context) expr.ConditionFunc
	WBuildHandler     func(ctx context.Context, next expr.Handler) expr.Handler
	WWhenDenied       func(a0 ...expr.Action) oidc.SSO
	WWhenExpired      func(a0 ...expr.Action) oidc.SSO
	WWhenInvalidToken func(a0 ...expr.Action) oidc.SSO
	WWhenNoToken      func(a0 ...expr.Action) oidc.SSO
	WWithAudience     func(audiences ...string) oidc.SSO
	WWithClaim        func(name string, values ...string) oidc.SSO
	WWithSameIssuer   func() oidc.SSO
}

func (W _github_com_mbict_befe_dsl_oidc_SSO) BuildCondition(a0 context.Context) expr.ConditionFunc {
	return W.WBuildCondition(a0)
}
func (W _github_com_mbict_befe_dsl_oidc_SSO) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_dsl_oidc_SSO) WhenDenied(a0 ...expr.Action) oidc.SSO {
	return W.WWhenDenied(a0...)
}
func (W _github_com_mbict_befe_dsl_oidc_SSO) WhenExpired(a0 ...expr.Action) oidc.SSO {
	return W.WWhenExpired(a0...)
}
func (W _github_com_mbict_befe_dsl_oidc_SSO) WhenInvalidToken(a0 ...expr.Action) oidc.SSO {
	return W.WWhenInvalidToken(a0...)
}
func (W _github_com_mbict_befe_dsl_oidc_SSO) WhenNoToken(a0 ...expr.Action) oidc.SSO {
	return W.WWhenNoToken(a0...)
}
func (W _github_com_mbict_befe_dsl_oidc_SSO) WithAudience(audiences ...string) oidc.SSO {
	return W.WWithAudience(audiences...)
}
func (W _github_com_mbict_befe_dsl_oidc_SSO) WithClaim(name string, values ...string) oidc.SSO {
	return W.WWithClaim(name, values...)
}
func (W _github_com_mbict_befe_dsl_oidc_SSO) WithSameIssuer() oidc.SSO {
	return W.WWithSameIssuer()
}
