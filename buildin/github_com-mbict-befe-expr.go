// Code generated by 'yaegi extract github.com/mbict/befe/expr'. DO NOT EDIT.

package buildin

import (
	"context"
	"github.com/mbict/befe/expr"
	"reflect"
)

func init() {
	Symbols["github.com/mbict/befe/expr/expr"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"DecodeResponse":      reflect.ValueOf(expr.DecodeResponse),
		"EmptyHandler":        reflect.ValueOf(expr.EmptyHandler),
		"GetResultBucket":     reflect.ValueOf(expr.GetResultBucket),
		"MockedAction":        reflect.ValueOf(expr.MockedAction),
		"MockedCondition":     reflect.ValueOf(expr.MockedCondition),
		"MockedHandler":       reflect.ValueOf(expr.MockedHandler),
		"NewConditionHandler": reflect.ValueOf(expr.NewConditionHandler),
		"NewDecisionTree":     reflect.ValueOf(expr.NewDecisionTree),
		"NewFileServer":       reflect.ValueOf(expr.NewFileServer),
		"NewPromise":          reflect.ValueOf(expr.NewPromise),
		"RequestDecoder":      reflect.ValueOf(&expr.RequestDecoder).Elem(),
		"StoreResultBucket":   reflect.ValueOf(expr.StoreResultBucket),
		"ValueToString":       reflect.ValueOf(expr.ValueToString),
		"WrapHttpHandler":     reflect.ValueOf(expr.WrapHttpHandler),

		// type definitions
		"Action":              reflect.ValueOf((*expr.Action)(nil)),
		"ActionFunc":          reflect.ValueOf((*expr.ActionFunc)(nil)),
		"Actions":             reflect.ValueOf((*expr.Actions)(nil)),
		"BuildConditionFunc":  reflect.ValueOf((*expr.BuildConditionFunc)(nil)),
		"Condition":           reflect.ValueOf((*expr.Condition)(nil)),
		"ConditionFunc":       reflect.ValueOf((*expr.ConditionFunc)(nil)),
		"ConditionHandler":    reflect.ValueOf((*expr.ConditionHandler)(nil)),
		"ConditionMiddleware": reflect.ValueOf((*expr.ConditionMiddleware)(nil)),
		"Conditions":          reflect.ValueOf((*expr.Conditions)(nil)),
		"DecisionCondition":   reflect.ValueOf((*expr.DecisionCondition)(nil)),
		"DecisionTree":        reflect.ValueOf((*expr.DecisionTree)(nil)),
		"ElseCondition":       reflect.ValueOf((*expr.ElseCondition)(nil)),
		"HTTPFileServer":      reflect.ValueOf((*expr.HTTPFileServer)(nil)),
		"HandleBuilder":       reflect.ValueOf((*expr.HandleBuilder)(nil)),
		"Handler":             reflect.ValueOf((*expr.Handler)(nil)),
		"Param":               reflect.ValueOf((*expr.Param)(nil)),
		"Promise":             reflect.ValueOf((*expr.Promise)(nil)),
		"ResultBucket":        reflect.ValueOf((*expr.ResultBucket)(nil)),
		"Transformer":         reflect.ValueOf((*expr.Transformer)(nil)),
		"TransformerFunc":     reflect.ValueOf((*expr.TransformerFunc)(nil)),
		"Valuer":              reflect.ValueOf((*expr.Valuer)(nil)),

		// interface wrapper definitions
		"_Action":              reflect.ValueOf((*_github_com_mbict_befe_expr_Action)(nil)),
		"_Condition":           reflect.ValueOf((*_github_com_mbict_befe_expr_Condition)(nil)),
		"_ConditionHandler":    reflect.ValueOf((*_github_com_mbict_befe_expr_ConditionHandler)(nil)),
		"_ConditionMiddleware": reflect.ValueOf((*_github_com_mbict_befe_expr_ConditionMiddleware)(nil)),
		"_DecisionCondition":   reflect.ValueOf((*_github_com_mbict_befe_expr_DecisionCondition)(nil)),
		"_DecisionTree":        reflect.ValueOf((*_github_com_mbict_befe_expr_DecisionTree)(nil)),
		"_ElseCondition":       reflect.ValueOf((*_github_com_mbict_befe_expr_ElseCondition)(nil)),
		"_HTTPFileServer":      reflect.ValueOf((*_github_com_mbict_befe_expr_HTTPFileServer)(nil)),
		"_Promise":             reflect.ValueOf((*_github_com_mbict_befe_expr_Promise)(nil)),
		"_Transformer":         reflect.ValueOf((*_github_com_mbict_befe_expr_Transformer)(nil)),
	}
}

// _github_com_mbict_befe_expr_Action is an interface wrapper for Action type
type _github_com_mbict_befe_expr_Action struct {
	IValue        interface{}
	WBuildHandler func(ctx context.Context, next expr.Handler) expr.Handler
}

func (W _github_com_mbict_befe_expr_Action) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}

// _github_com_mbict_befe_expr_Condition is an interface wrapper for Condition type
type _github_com_mbict_befe_expr_Condition struct {
	IValue          interface{}
	WBuildCondition func(a0 context.Context) expr.ConditionFunc
}

func (W _github_com_mbict_befe_expr_Condition) BuildCondition(a0 context.Context) expr.ConditionFunc {
	return W.WBuildCondition(a0)
}

// _github_com_mbict_befe_expr_ConditionHandler is an interface wrapper for ConditionHandler type
type _github_com_mbict_befe_expr_ConditionHandler struct {
	IValue          interface{}
	WBuildCondition func(a0 context.Context) expr.ConditionFunc
	WBuildHandler   func(ctx context.Context, next expr.Handler) expr.Handler
	WElse           func(a0 ...expr.Action) expr.Action
	WThen           func(a0 ...expr.Action) expr.ElseCondition
}

func (W _github_com_mbict_befe_expr_ConditionHandler) BuildCondition(a0 context.Context) expr.ConditionFunc {
	return W.WBuildCondition(a0)
}
func (W _github_com_mbict_befe_expr_ConditionHandler) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_expr_ConditionHandler) Else(a0 ...expr.Action) expr.Action {
	return W.WElse(a0...)
}
func (W _github_com_mbict_befe_expr_ConditionHandler) Then(a0 ...expr.Action) expr.ElseCondition {
	return W.WThen(a0...)
}

// _github_com_mbict_befe_expr_ConditionMiddleware is an interface wrapper for ConditionMiddleware type
type _github_com_mbict_befe_expr_ConditionMiddleware struct {
	IValue        interface{}
	WBuildHandler func(ctx context.Context, next expr.Handler) expr.Handler
	WMust         func(a0 ...expr.Condition) expr.ConditionMiddleware
	WOnFailure    func(a0 ...expr.Action) expr.ConditionMiddleware
}

func (W _github_com_mbict_befe_expr_ConditionMiddleware) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_expr_ConditionMiddleware) Must(a0 ...expr.Condition) expr.ConditionMiddleware {
	return W.WMust(a0...)
}
func (W _github_com_mbict_befe_expr_ConditionMiddleware) OnFailure(a0 ...expr.Action) expr.ConditionMiddleware {
	return W.WOnFailure(a0...)
}

// _github_com_mbict_befe_expr_DecisionCondition is an interface wrapper for DecisionCondition type
type _github_com_mbict_befe_expr_DecisionCondition struct {
	IValue interface{}
	WThen  func(a0 ...expr.Action) expr.DecisionTree
}

func (W _github_com_mbict_befe_expr_DecisionCondition) Then(a0 ...expr.Action) expr.DecisionTree {
	return W.WThen(a0...)
}

// _github_com_mbict_befe_expr_DecisionTree is an interface wrapper for DecisionTree type
type _github_com_mbict_befe_expr_DecisionTree struct {
	IValue        interface{}
	WBuildHandler func(ctx context.Context, next expr.Handler) expr.Handler
	WElse         func(a0 ...expr.Action) expr.Action
	WWhen         func(a0 ...expr.Condition) expr.DecisionCondition
}

func (W _github_com_mbict_befe_expr_DecisionTree) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_expr_DecisionTree) Else(a0 ...expr.Action) expr.Action {
	return W.WElse(a0...)
}
func (W _github_com_mbict_befe_expr_DecisionTree) When(a0 ...expr.Condition) expr.DecisionCondition {
	return W.WWhen(a0...)
}

// _github_com_mbict_befe_expr_ElseCondition is an interface wrapper for ElseCondition type
type _github_com_mbict_befe_expr_ElseCondition struct {
	IValue        interface{}
	WBuildHandler func(ctx context.Context, next expr.Handler) expr.Handler
	WElse         func(a0 ...expr.Action) expr.Action
}

func (W _github_com_mbict_befe_expr_ElseCondition) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_expr_ElseCondition) Else(a0 ...expr.Action) expr.Action {
	return W.WElse(a0...)
}

// _github_com_mbict_befe_expr_HTTPFileServer is an interface wrapper for HTTPFileServer type
type _github_com_mbict_befe_expr_HTTPFileServer struct {
	IValue                 interface{}
	WAllowDirectoryListing func(allow bool) expr.HTTPFileServer
	WBuildHandler          func(ctx context.Context, next expr.Handler) expr.Handler
	WServeFile             func(path string) expr.Action
	WWhenFound             func(actions ...expr.Action) expr.HTTPFileServer
	WWhenNotFound          func(actions ...expr.Action) expr.HTTPFileServer
}

func (W _github_com_mbict_befe_expr_HTTPFileServer) AllowDirectoryListing(allow bool) expr.HTTPFileServer {
	return W.WAllowDirectoryListing(allow)
}
func (W _github_com_mbict_befe_expr_HTTPFileServer) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_expr_HTTPFileServer) ServeFile(path string) expr.Action {
	return W.WServeFile(path)
}
func (W _github_com_mbict_befe_expr_HTTPFileServer) WhenFound(actions ...expr.Action) expr.HTTPFileServer {
	return W.WWhenFound(actions...)
}
func (W _github_com_mbict_befe_expr_HTTPFileServer) WhenNotFound(actions ...expr.Action) expr.HTTPFileServer {
	return W.WWhenNotFound(actions...)
}

// _github_com_mbict_befe_expr_Promise is an interface wrapper for Promise type
type _github_com_mbict_befe_expr_Promise struct {
	IValue        interface{}
	WBuildHandler func(ctx context.Context, next expr.Handler) expr.Handler
	WOnFailure    func(a0 ...expr.Action) expr.Promise
	WOnSuccess    func(a0 ...expr.Action) expr.Promise
}

func (W _github_com_mbict_befe_expr_Promise) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_expr_Promise) OnFailure(a0 ...expr.Action) expr.Promise {
	return W.WOnFailure(a0...)
}
func (W _github_com_mbict_befe_expr_Promise) OnSuccess(a0 ...expr.Action) expr.Promise {
	return W.WOnSuccess(a0...)
}

// _github_com_mbict_befe_expr_Transformer is an interface wrapper for Transformer type
type _github_com_mbict_befe_expr_Transformer struct {
	IValue        interface{}
	WBuildHandler func(ctx context.Context, next expr.Handler) expr.Handler
	WTransform    func(a0 interface{}) interface{}
}

func (W _github_com_mbict_befe_expr_Transformer) BuildHandler(ctx context.Context, next expr.Handler) expr.Handler {
	return W.WBuildHandler(ctx, next)
}
func (W _github_com_mbict_befe_expr_Transformer) Transform(a0 interface{}) interface{} {
	return W.WTransform(a0)
}
